import argparse
import os
from tqdm import tqdm
from getobjdump import *
import pefile
import time
import csv

csvFields = ["class", "sub-class", "size", "corpus"]
corpusListOfDictionary = []
#-------------------------------------------------------------------------------------------------------------------
# Function to read a pe file and extract all the opcodes
# Returns the list of unique opcodes
def XtractOpcodes(file):
    opcodeLst = []
    try:
        thisPE = pefile.PE(os.path.join(path, file))

        ## Disassemble the pe file
        opcodeLst = getOpcodeLst(thisPE, CS_ARCH_X86, CS_MODE_32)
        #print(len(opcodeLst))

    except Exception as err:
        print(f"\n{file}: Not a PE file, or missing Header!\n{err}")
    return opcodeLst

#-------------------------------------------------------------------------------------------------------------------
# Write the data into the given csv file handle
def WriteCSV (file):
    writer = csv.DictWriter(file, fieldnames=csvFields)
    writer.writeheader()
    writer.writerows(corpusListOfDictionary)

#-------------------------------------------------------------------------------------------------------------------
# Execution starts here
# Add command line arguments
parser = argparse.ArgumentParser(description="Build a corpus from a list of pe files in a given folder."\
                                 " Stores the corpus into filename.corpus file")
parser.add_argument('path', help='path to the PE files')
parser.add_argument('className', help='name of the class of pe files in this folder')

# Execute the parse_args() method
args        = parser.parse_args()

# Get user arguments
path        = args.path
className   = args.className
subClass    = path.split('/').pop()

# Error check and exit early
if not os.path.exists(path):
    print (f"Path doesn't exists {path}")
    exit(1)
# Error check and exit if file
if os.path.isfile(path):
    print (f"Path should be directory {path}")
    exit(1)

#count number of files in this directory
onlyfiles = next(os.walk(path))[2]
fileCount = len(onlyfiles)
corpusLst = []

res = []
# List through the directory and parse the files
for idx in tqdm(range(0, fileCount), ncols=100, desc="Reading .."):
    #print(f"Reading {onlyfiles[idx]}:")
    ## Method to extract opcodes from pefile and capstone is inefficient
    # corpusLst = XtractOpcodes(onlyfiles[idx])
    corpusLst = ListOpcodesfromObjDump(os.path.join(path, onlyfiles[idx]))
    corpusLen = len(corpusLst)

    ## skip very large files with opcodes greater than 2lac
    if corpusLen > 200000:
        continue

    ## Clean the corpus list replacing space with _ for multi-word opcodes
    ## multi word opcodes are represented as first word now.
    #for idx2 in range(corpusLen):
    #    if " " in corpusLst[idx2]:
    #        corpusLst[idx2] = corpusLst[idx2].replace(" ", "_")

    corpusString = ' '.join(corpusLst)
    #write to corpus dictionary
    ##print(f"{idx}:{onlyfiles[idx]} = {corpusLen}")
    res.append ({"class":className, "sub-class":subClass, "size":corpusLen, "corpus":corpusString})
    time.sleep(0.05)

## Remove duplicates
[corpusListOfDictionary.append(item) for item in res if item not in corpusListOfDictionary]

print(f"Total corpus Files = {fileCount}")
print(f"Redundant corpus removed {fileCount - len(corpusListOfDictionary)}")

# Write to the csv accumulated items
# open csv file for write
csvname = className + "_" + subClass + ".corpus.csv"
try:
    csvFile = open(csvname, 'w')
except Exception as err:
    print ("\tERR: writing csv file!")
    print (err)
WriteCSV(csvFile)

#import ML classifiers
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier ## using version 0.9
#import train-test modeling
from sklearn.model_selection import train_test_split
#Import metrics related libraries
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import pandas as pd
import argparse
import os

#Run the given classifier for the given Training and Test datset
def runClassifier(mlclass, xTrain, yTrain, xTest, yTest):
    if mlclass == 1:
            DT = DecisionTreeClassifier()
            yPredict = DT.fit(xTrain, yTrain).predict(xTest)
            className = "Decision Tree"
    elif mlclass == 2:  # KNN
            KNN = KNeighborsClassifier(n_neighbors=1)
            yPredict = KNN.fit(xTrain, yTrain).predict(xTest)
            className = "K-Nearest Neighbor"
    elif mlclass == 3:  # RF
            RF = RandomForestClassifier()
            yPredict = RF.fit(xTrain, yTrain).predict(xTest)
            className = "Random Forest"
    elif mlclass == 4:  # XGBoost
            XGB = XGBClassifier()
            XGB.fit(xTrain, yTrain)
            yPredict = XGB.predict(xTest)
            className = "XG Boost"

    print(f"Classification Report for {className}")
    print(classification_report(yTest, yPredict))
    print(f"Accuracy = {accuracy_score(yTest, yPredict) * 100}")
    print(confusion_matrix(yTest, yPredict))

# Main execution starts from here. Get user arguments and process classifiers.
parser = argparse.ArgumentParser("Apply classifier to ngram feature set")
parser.add_argument('path', help="Path to dataset file")
parser.add_argument('classifier', type=int, help="1 - DT, 2 - KNN, 3 - RF, 4 - XG, 5-All")

userArgs = parser.parse_args()
path = userArgs.path
mlclass = int(userArgs.classifier)

if mlclass > 5 or mlclass < 1:
    print("Invalid classifier provided, values [1-5]")
    exit(1)

if not os.path.isfile(path):
    print("Path is not a csv file")
    exit(2)

dataframe = pd.read_csv(path, delimiter=',')
training = pd.DataFrame(dataframe)
x = training.drop(['class'], axis = 1)
y = training['class']

xTrain, xTest, yTrain, yTest = train_test_split(x, y, train_size=0.70, random_state=42)

if mlclass == 5:
    for mlcl in range(4):
        runClassifier(mlcl+1, xTrain, yTrain, xTest, yTest)
else:
    runClassifier(mlclass, xTrain, yTrain, xTest, yTest)

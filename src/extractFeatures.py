import argparse
import os
import csv
import pandas as pd
from tqdm import tqdm

# Program Details -
# Read the benign and malign corpus files and enumerate the features selected.
# Arguments include path to corpus files and path to feature list file
# output will be a csv file of all files with their enumerated feature values.
# -----------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# Function to rad a file and create a list of all lines
# each line in the file represent an ngram
def getFeatures(filePath):
    lines = []
    try:
        filehandle = open(filePath, 'r')
    except Exception as error:
        print(f"{error}: reading file {filePath}")
        return lines

    for line in filehandle:
        lines.append(line.rstrip())
    return lines

#--------------------------------------------------------------------------------------------------
# Function to compute the frequencies of all ngrams in the ftList
# from the given corpus which is is the opcode sequence
# and stores into the dictionary item
def computeFeatureFrequencies(ftList, corpus):
    item = {}
    for ngram in ftList:
        #compute frequency of ngram in this corpus
        item[ngram] = corpus.count(ngram)
    return item

#--------------------------------------------------------------------------------------------------
# Write the data into the given csv file handle
def WriteCSV (file, csvFields, dataDictionary):
    try:
        writer = csv.DictWriter(file, fieldnames=csvFields)
        writer.writeheader()
        writer.writerows(dataDictionary)
    except Exception as error:
        print(f"Error writing csv file")

parser = argparse.ArgumentParser("Extracts features and enumerates them for corpus files into finalFeatures.csv")
parser.add_argument('path', help='path to corpus csv files')
parser.add_argument('featureFile', help='feature file path')

args = parser.parse_args()

path = args.path
featureFile = args.featureFile

# corpus csv format class, subclass, size, opcode-seqeunce
# featureFile format - list of ngrams per line

#check valid file
if not os.path.isfile(featureFile):
    print(f"Feature file: {featureFile} doesn't exist")
    exit(1)

#check valid corpus
if not os.path.exists(path):
    print(f"Corpus csv path: {path} doesn't exist")
    exit(2)

featureList = getFeatures(featureFile)
print(f"Num features = {len(featureList)}")
# Final output csv header - feature list.....(frequency), size, class
csvFields = featureList
csvFields.append('size')
csvFields.append('class')

featDictionaryList = []
#for each corpus csv file compute the frequency of each ngram in the featureList
for file in os.listdir(path):
    filepath = os.path.join(path, file)
    if os.path.isfile(filepath):
        #got the csv file, read it
        print(f"Reading {file}...")
        try:
            csvData = pd.read_csv(filepath, encoding='utf8')
        except Exception as error:
            print(f"[{error}]: reading csv file {file}")
            continue
        #now read each row and compute frequency
        rows = len(csvData)

        for idx in tqdm(range(0, rows), ncols=100, desc="Processing rows..."):
            dictionaryItem = {}
            #Add all feature list into the dictionary with their frequency computed
            dictionaryItem = computeFeatureFrequencies(featureList, csvData.loc[idx, "corpus"])
            dictionaryItem["class"] = csvData.loc[idx, "class"]
            dictionaryItem["size"] = csvData.loc[idx, "size"]
            featDictionaryList.append(dictionaryItem)

print(f"Num files enumerated = {len(featDictionaryList)}")

#Write into featureset csv file
csvname = "ml_input.csv"
try:
   csvfile = open(csvname, 'w')
except Exception as err:
   print(f"Error: writing csvfile {err}")

# write into csv
WriteCSV(csvfile, csvFields, featDictionaryList)
csvfile.close()




